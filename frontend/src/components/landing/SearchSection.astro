---
// Search Section component with full functionality
---

<section id="search" class="bg-primary">
  <div class="px-8 2xl:max-w-7xl mx-auto py-24">
    <div data-aos="fade-up" data-aos-duration="1000">
      <h2 class="text-secondary text-4xl md:text-5xl font-bold mb-12">
        Finden Sie Ihr Fahrzeug
      </h2>
      
      <!-- Search Container -->
      <div id="search-container" class="bg-primary border-2 border-secondary/30 shadow-lg overflow-hidden">
        <!-- Main Search Bar -->
        <div class="bg-secondary/5 border-b border-secondary/20 p-6">
          <div class="flex flex-col md:flex-row gap-4">
            <!-- Main Search Input -->
            <div class="flex-1">
              <label for="query" class="block text-secondary text-sm font-bold mb-2">
                Suchen Sie nach Marke, Modell oder Typ
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="query"
                  name="query"
                  placeholder="z.B. BMW X5, Mercedes C-Klasse, Audi A4..."
                  class="main-search-input"
                />
                <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="text-primary/40">
                    <circle cx="11" cy="11" r="8"></circle>
                    <path d="m21 21-4.35-4.35"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Quick Filters (Mobile: Hidden, Desktop: Visible) -->
            <div class="hidden md:flex gap-4 items-end">
              <!-- Brand -->
              <div class="min-w-[160px]">
                <label for="brand" class="block text-secondary text-sm font-bold mb-2">
                  Marke
                </label>
                <div class="custom-select-wrapper">
                  <select id="brand" name="brand" class="custom-select">
                    <option value="">Alle Marken</option>
                  </select>
                </div>
              </div>

              <!-- Price Range -->
              <div class="min-w-[160px]">
                <label for="maxPrice" class="block text-secondary text-sm font-bold mb-2">
                  Max. Preis (CHF)
                </label>
                <input
                  type="number"
                  id="maxPrice"
                  name="max_price"
                  placeholder="100000"
                  class="custom-input"
                />
              </div>

              <!-- Search Button -->
              <button
                type="submit"
                form="searchForm"
                class="search-button">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
                <span class="hidden md:inline ml-2">SUCHEN</span>
              </button>
            </div>

            <!-- Mobile Search Button -->
            <div class="md:hidden">
              <button
                type="submit"
                form="searchForm"
                class="search-button w-full">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
                <span class="ml-2">SUCHEN</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Advanced Filters Section -->
        <div class="border-b border-secondary/20">
          <button
            type="button"
            id="toggleFilters"
            class="w-full p-4 flex items-center justify-between text-secondary hover:bg-secondary/5 transition-colors duration-200">
            <div class="flex items-center gap-2">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"></polygon>
              </svg>
              <span class="font-bold">Erweiterte Filter</span>
            </div>
            <svg 
              id="filterToggleIcon" 
              width="18" 
              height="18" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2"
              class="transform transition-transform duration-200">
              <polyline points="6,9 12,15 18,9"></polyline>
            </svg>
          </button>

          <!-- Collapsible Filters Container -->
          <div id="filtersContainer" class="hidden">
            <form id="searchForm" class="p-6 space-y-6">
              <!-- Mobile: Show brand and price here too -->
              <div class="grid grid-cols-1 md:hidden gap-4">
                <!-- Brand (Mobile) -->
                <div>
                  <label for="brandMobile" class="block text-secondary text-sm font-bold mb-2">
                    Marke
                  </label>
                  <div class="custom-select-wrapper">
                    <select id="brandMobile" name="brand" class="custom-select">
                      <option value="">Alle Marken</option>
                    </select>
                  </div>
                </div>

                <!-- Price Range (Mobile) -->
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label for="minPriceMobile" class="block text-secondary text-sm font-bold mb-2">
                      Min. Preis (CHF)
                    </label>
                    <input
                      type="number"
                      id="minPriceMobile"
                      name="min_price"
                      placeholder="0"
                      class="custom-input"
                    />
                  </div>
                  <div>
                    <label for="maxPriceMobile" class="block text-secondary text-sm font-bold mb-2">
                      Max. Preis (CHF)
                    </label>
                    <input
                      type="number"
                      id="maxPriceMobile"
                      name="max_price"
                      placeholder="100000"
                      class="custom-input"
                    />
                  </div>
                </div>
              </div>

              <!-- Desktop: Hide brand and max price here -->
              <div class="hidden md:block">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <!-- Min Price (Desktop only) -->
                  <div>
                    <label for="minPrice" class="block text-secondary text-sm font-bold mb-2">
                      Min. Preis (CHF)
                    </label>
                    <input
                      type="number"
                      id="minPrice"
                      name="min_price"
                      placeholder="0"
                      class="custom-input"
                    />
                  </div>
                  <div></div> <!-- Empty space for layout -->
                </div>
              </div>

              <!-- Common Filters -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Car Type -->
                <div>
                  <label for="carType" class="block text-secondary text-sm font-bold mb-2">
                    Fahrzeugtyp
                  </label>
                  <div class="custom-select-wrapper">
                    <select id="carType" name="car_type" class="custom-select">
                      <option value="">Alle Typen</option>
                    </select>
                  </div>
                </div>

                <!-- Fuel -->
                <div>
                  <label for="fuel" class="block text-secondary text-sm font-bold mb-2">
                    Kraftstoff
                  </label>
                  <div class="custom-select-wrapper">
                    <select id="fuel" name="fuel" class="custom-select">
                      <option value="">Alle</option>
                    </select>
                  </div>
                </div>

                <!-- Transmission -->
                <div>
                  <label for="transmission" class="block text-secondary text-sm font-bold mb-2">
                    Getriebe
                  </label>
                  <div class="custom-select-wrapper">
                    <select id="transmission" name="transmission" class="custom-select">
                      <option value="">Alle</option>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Mileage -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label for="maxMileage" class="block text-secondary text-sm font-bold mb-2">
                    Max. Kilometerstand
                  </label>
                  <input
                    type="number"
                    id="maxMileage"
                    name="max_mileage"
                    placeholder="200000"
                    class="custom-input"
                  />
                </div>
              </div>

              <!-- Apply Filters Button (Mobile) -->
              <div class="md:hidden pt-4">
                <button
                  type="submit"
                  class="w-full search-button">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <path d="m21 21-4.35-4.35"></path>
                  </svg>
                  FILTER ANWENDEN
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Results Info -->
        <div id="resultsInfo" class="hidden p-6 bg-secondary/5">
          <div class="flex justify-between items-center">
            <h3 class="text-secondary text-xl md:text-2xl font-bold">
              <span id="resultsCount">0</span> Fahrzeuge gefunden
            </h3>
          </div>
        </div>

        <!-- Loading State -->
        <div id="loading" class="hidden p-12 text-center">
          <div class="inline-block animate-spin h-8 w-8 border-4 border-secondary/20 border-t-secondary rounded-full"></div>
          <p class="text-secondary mt-4">Suche Fahrzeuge...</p>
        </div>

        <!-- Results Grid -->
        <div id="carsGrid" class="p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Results will be inserted here -->
        </div>

        <!-- Pagination -->
        <div id="paginationContainer" class="p-6 pt-0">
          <!-- Pagination will be inserted here -->
        </div>

        <!-- Error State -->
        <div id="error" class="hidden p-6 bg-red-900/20 border-2 border-red-500/50 mx-6 mb-6">
          <p class="text-red-300 font-bold">Fehler</p>
          <p id="errorMessage" class="text-red-400 mt-2"></p>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Main Search Input */
  .main-search-input {
    @apply w-full px-4 py-3 pr-12 bg-secondary text-primary border-2 border-secondary/30;
    @apply focus:outline-none focus:ring-2 focus:ring-secondary/40 focus:border-secondary;
    @apply hover:border-secondary/50 transition-all duration-200;
    @apply text-lg placeholder:text-primary/50;
    height: 48px; /* Fixed height for consistency */
    
    /* Remove browser defaults */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    box-shadow: none;
  }

  /* Search Button */
  .search-button {
    @apply px-6 py-3 bg-secondary text-primary border-2 border-secondary;
    @apply font-bold hover:bg-primary hover:text-secondary hover:border-secondary;
    @apply transition-all duration-200 flex items-center justify-center gap-2;
    @apply min-w-fit whitespace-nowrap;
    height: 48px; /* Fixed height to match inputs */
  }

  /* Custom Form Input Styles */
  .custom-input {
    @apply w-full px-4 py-3 bg-secondary text-primary border-2 border-secondary/30;
    @apply focus:outline-none focus:ring-2 focus:ring-secondary/40 focus:border-secondary;
    @apply hover:border-secondary/50 transition-all duration-200;
    height: 48px; /* Fixed height for consistency */
    
    /* Remove browser defaults */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    box-shadow: none;
  }

  .custom-input::placeholder {
    @apply text-primary/50;
  }

  /* Custom Select Wrapper */
  .custom-select-wrapper {
    @apply relative;
  }

  /* Custom Select Dropdown Arrow */
  .custom-select-wrapper::after {
    content: '';
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 6px solid;
    @apply border-t-primary;
    pointer-events: none;
    transition: all 0.2s ease;
  }

  /* Custom Select Styles */
  .custom-select {
    @apply w-full px-4 py-3 pr-10 bg-secondary text-primary border-2 border-secondary/30;
    @apply focus:outline-none focus:ring-2 focus:ring-secondary/40 focus:border-secondary;
    @apply hover:border-secondary/50 cursor-pointer transition-all duration-200;
    height: 48px; /* Fixed height to match other inputs */
    
    /* Remove browser defaults */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    box-shadow: none;
    background-image: none;
  }

  /* Custom Select Option Styles */
  .custom-select option {
    @apply bg-secondary text-primary py-2;
    border: none;
  }

  /* Number input spinner removal */
  .custom-input[type="number"]::-webkit-outer-spin-button,
  .custom-input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .custom-input[type="number"] {
    -moz-appearance: textfield;
  }

  /* Active/Selected state */
  .custom-select:focus,
  .custom-input:focus,
  .main-search-input:focus {
    @apply border-secondary ring-2 ring-secondary/40;
  }

  /* Disabled state */
  .custom-select:disabled,
  .custom-input:disabled {
    @apply bg-secondary/50 text-primary/50 cursor-not-allowed border-secondary/20;
  }
</style>

<script>
  // API Configuration
  const API_BASE_URL = 'https://d20whpdmgfymfw.cloudfront.net';

  // State
  let currentPage = 1;
  let totalPages = 1;
  let searchData: any = {};
  let searchOptions: any = {};

  // DOM Elements
  const searchForm = document.getElementById('searchForm') as HTMLFormElement;
  const carsGrid = document.getElementById('carsGrid') as HTMLElement;
  const loading = document.getElementById('loading') as HTMLElement;
  const resultsInfo = document.getElementById('resultsInfo') as HTMLElement;
  const resultsCount = document.getElementById('resultsCount') as HTMLElement;
  const paginationContainer = document.getElementById('paginationContainer') as HTMLElement;
  const errorDiv = document.getElementById('error') as HTMLElement;
  const errorMessage = document.getElementById('errorMessage') as HTMLElement;

  // Filter toggle elements
  const toggleFilters = document.getElementById('toggleFilters') as HTMLButtonElement;
  const filtersContainer = document.getElementById('filtersContainer') as HTMLElement;
  const filterToggleIcon = document.getElementById('filterToggleIcon') as HTMLElement;

  // Initialize
  async function init() {
    await loadSearchOptions();
    await performSearch();
    initFilterToggle();
  }

  // Initialize filter toggle
  function initFilterToggle() {
    if (toggleFilters && filtersContainer && filterToggleIcon) {
      toggleFilters.addEventListener('click', () => {
        const isHidden = filtersContainer.classList.contains('hidden');
        
        if (isHidden) {
          filtersContainer.classList.remove('hidden');
          filterToggleIcon.style.transform = 'rotate(180deg)';
        } else {
          filtersContainer.classList.add('hidden');
          filterToggleIcon.style.transform = 'rotate(0deg)';
        }
      });
    }
  }

  // Load search options
  async function loadSearchOptions() {
    try {
      const response = await fetch(`${API_BASE_URL}/search/options`);
      if (response.ok) {
        searchOptions = await response.json();
        
        // Populate desktop selects
        populateSelect('brand', searchOptions.brands || []);
        populateSelect('carType', searchOptions.car_types || []);
        populateSelect('fuel', searchOptions.fuels || []);
        populateSelect('transmission', searchOptions.transmissions || []);

        // Populate mobile selects
        populateSelect('brandMobile', searchOptions.brands || []);
      }
    } catch (error) {
      console.error('Error loading search options:', error);
    }
  }

  // Populate select options
  function populateSelect(elementId: string, options: string[]) {
    const select = document.getElementById(elementId) as HTMLSelectElement;
    if (!select) return;
    
    options.forEach(option => {
      const optionElement = document.createElement('option');
      optionElement.value = option;
      optionElement.textContent = option;
      select.appendChild(optionElement);
    });
  }

  // Collect form data from both desktop and mobile inputs
  function collectFormData() {
    const data: Record<string, any> = {};
    
    // Main search query
    const queryInput = document.getElementById('query') as HTMLInputElement;
    if (queryInput?.value) data.query = queryInput.value;

    // Brand (check both desktop and mobile)
    const brandDesktop = document.getElementById('brand') as HTMLSelectElement;
    const brandMobile = document.getElementById('brandMobile') as HTMLSelectElement;
    const brandValue = brandDesktop?.value || brandMobile?.value;
    if (brandValue) data.brand = brandValue;

    // Price (check both desktop and mobile)
    const minPriceDesktop = document.getElementById('minPrice') as HTMLInputElement;
    const minPriceMobile = document.getElementById('minPriceMobile') as HTMLInputElement;
    const minPriceValue = minPriceDesktop?.value || minPriceMobile?.value;
    if (minPriceValue) data.min_price = minPriceValue;

    const maxPriceDesktop = document.getElementById('maxPrice') as HTMLInputElement;
    const maxPriceMobile = document.getElementById('maxPriceMobile') as HTMLInputElement;
    const maxPriceValue = maxPriceDesktop?.value || maxPriceMobile?.value;
    if (maxPriceValue) data.max_price = maxPriceValue;

    // Other filters
    const carType = document.getElementById('carType') as HTMLSelectElement;
    if (carType?.value) data.car_type = carType.value;

    const fuel = document.getElementById('fuel') as HTMLSelectElement;
    if (fuel?.value) data.fuel = fuel.value;

    const transmission = document.getElementById('transmission') as HTMLSelectElement;
    if (transmission?.value) data.transmission = transmission.value;

    const maxMileage = document.getElementById('maxMileage') as HTMLInputElement;
    if (maxMileage?.value) data.max_mileage = maxMileage.value;

    return data;
  }

  // Perform search
  async function performSearch(page: number = 1) {
    showLoading();
    
    try {
      const searchParams = collectFormData();
      
      searchParams.limit = 9; // 3x3 grid
      searchParams.offset = (page - 1) * 9;
      
      const response = await fetch(`${API_BASE_URL}/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(searchParams),
      });
      
      if (!response.ok) {
        throw new Error(`Suche fehlgeschlagen: ${response.statusText}`);
      }
      
      searchData = await response.json();
      currentPage = page;
      totalPages = Math.ceil((searchData.total || 0) / 9);
      
      renderResults();
      renderPagination();
      
    } catch (error) {
      displayError((error as Error).message);
    } finally {
      hideLoading();
    }
  }

  // Render search results
  function renderResults() {
    if (!carsGrid || !resultsInfo || !resultsCount) return;
    
    if (!searchData.cars || searchData.cars.length === 0) {
      carsGrid.innerHTML = `
        <div class="col-span-full text-center py-12">
          <h3 class="text-secondary text-2xl font-bold mb-4">Keine Fahrzeuge gefunden</h3>
          <p class="text-secondary/60">Versuchen Sie, Ihre Suchkriterien anzupassen.</p>
        </div>
      `;
      resultsInfo.classList.add('hidden');
      return;
    }
    
    const carsHTML = searchData.cars.map((car: any, index: number) => {
      return `
        <div 
          class="bg-primary border-2 border-secondary/30 p-6 group hover:border-secondary/60 transition-all duration-300 car-card cursor-pointer hover:shadow-lg"
          data-aos="fade-up" 
          data-aos-duration="500"
          data-aos-delay="${index * 100}"
          data-car='${JSON.stringify(car).replace(/'/g, "&#39;")}'>
          
          <!-- Car Image -->
          <div class="aspect-video bg-secondary/20 border border-secondary/20 mb-4 overflow-hidden transition-colors duration-300 relative">
            ${car.image_urls?.[0] ? `
              <img 
                src="${car.image_urls[0]}" 
                alt="${car.title}"
                class="w-full h-full object-cover"
                loading="lazy"
              />
            ` : `
              <div class="w-full h-full flex items-center justify-center">
                <div class="w-16 h-16 bg-secondary/20 border border-secondary/30"></div>
              </div>
            `}
          </div>

          <!-- Car Info -->
          <div class="space-y-2">
            <!-- Brand -->
            <div class="text-secondary/60 text-xs font-bold uppercase tracking-wider transition-colors duration-300">
              ${car.brand}
            </div>

            <!-- Title -->
            <h3 class="text-secondary font-bold text-lg leading-tight transition-colors duration-300">
              ${car.title}
            </h3>

            <!-- Price -->
            <div class="text-secondary font-bold text-xl transition-colors duration-300">
              CHF ${car.price_chf.toLocaleString()}
            </div>

            <!-- Leasing Text -->
            ${car.leasing_text ? `
              <div class="text-secondary/60 text-sm transition-colors duration-300">
                ${car.leasing_text}
              </div>
            ` : ''}
          </div>
        </div>
      `;
    }).join('');
    
    carsGrid.innerHTML = carsHTML;
    
    resultsCount.textContent = `${searchData.total || 0}`;
    resultsInfo.classList.remove('hidden');

    // Initialize click events for the new car cards
    initDynamicCarCardClicks();

    // Reinitialize AOS for new elements
    if (typeof (window as any).AOS !== 'undefined') {
      (window as any).AOS.refresh();
    }
  }

  // Click event handling for dynamically created car cards
  function initDynamicCarCardClicks() {
    const carCards = document.querySelectorAll('.car-card');
    
    carCards.forEach((card) => {
      // Remove existing click listeners to avoid duplicates
      const newCard = card.cloneNode(true) as HTMLElement;
      card.parentNode?.replaceChild(newCard, card);
      
      newCard.addEventListener('click', (e) => {
        const carData = newCard.getAttribute('data-car');
        if (carData && (window as any).openCarModal) {
          try {
            const car = JSON.parse(carData.replace(/&#39;/g, "'"));
            (window as any).openCarModal(car);
          } catch (e) {
            console.error('Error parsing car data:', e);
          }
        }
      });
    });
  }

  // Render pagination
  function renderPagination() {
    if (!paginationContainer) return;
    
    if (totalPages <= 1) {
      paginationContainer.innerHTML = '';
      return;
    }
    
    const visiblePages = getVisiblePages(currentPage, totalPages);
    const pagesHTML = visiblePages.map(page => {
      if (page === '...') {
        return '<span class="px-2 text-secondary">...</span>';
      }
      return `
        <button 
          class="px-4 py-2 ${page === currentPage ? 'bg-secondary text-primary' : 'bg-primary text-secondary border-2 border-secondary/50 hover:bg-secondary hover:text-primary'} font-bold transition-colors duration-200"
          onclick="goToPage(${page})"
        >
          ${page}
        </button>
      `;
    }).join('');
    
    paginationContainer.innerHTML = `
      <div class="flex justify-center items-center gap-2 flex-wrap">
        <button 
          class="px-4 py-2 bg-primary text-secondary border-2 border-secondary/50 hover:bg-secondary hover:text-primary font-bold transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          ${currentPage <= 1 ? 'disabled' : ''}
          onclick="goToPage(${currentPage - 1})"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
          Zurück
        </button>
        ${pagesHTML}
        <button 
          class="px-4 py-2 bg-primary text-secondary border-2 border-secondary/50 hover:bg-secondary hover:text-primary font-bold transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          ${currentPage >= totalPages ? 'disabled' : ''}
          onclick="goToPage(${currentPage + 1})"
        >
          Weiter
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    `;
  }

  // Get visible pages for pagination
  function getVisiblePages(current: number, total: number) {
    const delta = 2;
    const range = [];
    const rangeWithDots = [];
    
    for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
      range.push(i);
    }
    
    if (current - delta > 2) {
      rangeWithDots.push(1, '...');
    } else {
      rangeWithDots.push(1);
    }
    
    rangeWithDots.push(...range);
    
    if (current + delta < total - 1) {
      rangeWithDots.push('...', total);
    } else if (total > 1) {
      rangeWithDots.push(total);
    }
    
    return rangeWithDots;
  }

  // Go to specific page
  (window as any).goToPage = function(page: number) {
    if (page >= 1 && page <= totalPages) {
      performSearch(page);
      document.getElementById('search')?.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Show loading state
  function showLoading() {
    if (!loading || !carsGrid || !resultsInfo || !paginationContainer || !errorDiv) return;
    
    loading.classList.remove('hidden');
    carsGrid.innerHTML = '';
    resultsInfo.classList.add('hidden');
    paginationContainer.innerHTML = '';
    errorDiv.classList.add('hidden');
  }

  // Hide loading state
  function hideLoading() {
    if (!loading) return;
    loading.classList.add('hidden');
  }

  // Display error
  function displayError(message: string) {
    if (!errorDiv || !errorMessage || !carsGrid) return;

    hideLoading();
    errorDiv.classList.remove('hidden');
    errorMessage.textContent = message;
    carsGrid.innerHTML = '';
  }

  // Event listeners
  if (searchForm) {
    searchForm.addEventListener('submit', (e) => {
      e.preventDefault();
      currentPage = 1;
      performSearch(1);
    });
  }

  // Quick search from main input
  const queryInput = document.getElementById('query') as HTMLInputElement;
  if (queryInput) {
    queryInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        currentPage = 1;
        performSearch(1);
      }
    });
  }

  // Initialize when DOM is loaded
  init();
</script> 