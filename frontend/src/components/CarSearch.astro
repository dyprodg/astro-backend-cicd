---
import CarCard from './CarCard.astro';
import Pagination from './Pagination.astro';

// Deine API URL - anpassen falls n√∂tig
const API_BASE_URL = 'https://d20whpdmgfymfw.cloudfront.net';

---
<div class="car-search-container">
  <div class="search-header">
    <h1>Fahrzeugsuche</h1>
    <p>Finden Sie Ihr Traumfahrzeug aus unserer Auswahl</p>
  </div>

  <form class="search-form" id="searchForm">
    <div class="search-row">
      <div class="search-field">
        <label for="query">Suche</label>
        <input 
          type="text" 
          id="query" 
          name="query" 
          placeholder="BMW, Mercedes, etc..."
        />
      </div>
      
      <div class="search-field">
        <label for="brand">Marke</label>
        <select id="brand" name="brand">
          <option value="">Alle Marken</option>
        </select>
      </div>
      
      <div class="search-field">
        <label for="carType">Fahrzeugtyp</label>
        <select id="carType" name="car_type">
          <option value="">Alle Typen</option>
        </select>
      </div>
      
      <div class="search-field">
        <label for="fuel">Kraftstoff</label>
        <select id="fuel" name="fuel">
          <option value="">Alle</option>
        </select>
      </div>
    </div>
    
    <div class="search-row">
      <div class="search-field">
        <label for="transmission">Getriebe</label>
        <select id="transmission" name="transmission">
          <option value="">Alle</option>
        </select>
      </div>
      
      <div class="search-field">
        <label for="minPrice">Min. Preis (CHF)</label>
        <input type="number" id="minPrice" name="min_price" placeholder="0" />
      </div>
      
      <div class="search-field">
        <label for="maxPrice">Max. Preis (CHF)</label>
        <input type="number" id="maxPrice" name="max_price" placeholder="100000" />
      </div>
      
      <div class="search-field">
        <label for="maxMileage">Max. Kilometer</label>
        <input type="number" id="maxMileage" name="max_mileage" placeholder="200000" />
      </div>
    </div>

    <div class="search-row">
      <div class="search-field search-actions">
        <button type="submit" class="search-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
          </svg>
          Suchen
        </button>
      </div>
    </div>
  </form>

  <div class="results-info" id="resultsInfo" style="display: none;">
    <span id="resultsCount"></span>
  </div>

  <div class="loading" id="loading" style="display: none;">
    <div class="loading-spinner"></div>
    <p>Fahrzeuge werden geladen...</p>
  </div>

  <div class="cars-grid" id="carsGrid">
    <!-- Cars will be loaded here -->
  </div>

  <div id="paginationContainer">
    <!-- Pagination will be loaded here -->
  </div>
</div>

<style>
  .car-search-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .search-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .search-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 0.5rem 0;
  }

  .search-header p {
    font-size: 1.125rem;
    color: #6b7280;
    margin: 0;
  }

  .search-form {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }

  .search-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .search-row:last-child {
    margin-bottom: 0;
  }

  .search-field {
    display: flex;
    flex-direction: column;
  }

  .search-field label {
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .search-field input,
  .search-field select {
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  .search-field input:focus,
  .search-field select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .search-actions {
    align-self: end;
  }

  .search-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    width: 100%;
    justify-content: center;
  }

  .search-btn:hover {
    background: #2563eb;
  }

  .results-info {
    text-align: center;
    margin-bottom: 1rem;
    font-size: 1.125rem;
    color: #6b7280;
  }

  .loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
    text-align: center;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f4f6;
    border-top: 4px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .cars-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .car-brand {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .no-results {
    text-align: center;
    padding: 4rem 2rem;
    color: #6b7280;
  }

  .no-results h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  /* Responsive grid */
  @media (min-width: 768px) {
    .cars-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .cars-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 768px) {
    .car-search-container {
      padding: 1rem;
    }

    .search-header h1 {
      font-size: 2rem;
    }

    .search-form {
      padding: 1.5rem;
    }

    .search-row {
      grid-template-columns: 1fr;
    }

    .cars-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
</style>

<script>
  // API Configuration
  const API_BASE_URL = 'https://brlsb82kdc.execute-api.eu-central-1.amazonaws.com/prod';
  
  // State
  let currentPage = 1;
  let totalPages = 1;
  let searchData: any = {};
  let searchOptions: any = {};
  
  // DOM Elements
  const searchForm = document.getElementById('searchForm') as HTMLFormElement;
  const carsGrid = document.getElementById('carsGrid') as HTMLElement;
  const loading = document.getElementById('loading') as HTMLElement;
  const resultsInfo = document.getElementById('resultsInfo') as HTMLElement;
  const resultsCount = document.getElementById('resultsCount') as HTMLElement;
  const paginationContainer = document.getElementById('paginationContainer') as HTMLElement;
  
  // Initialize
  async function init() {
    await loadSearchOptions();
    await performSearch();
  }
  
  // Load search options
  async function loadSearchOptions() {
    try {
      const response = await fetch(`${API_BASE_URL}/search/options`);
      searchOptions = await response.json();
      
      populateSelect('brand', searchOptions.brands || []);
      populateSelect('carType', searchOptions.car_types || []);
      populateSelect('fuel', searchOptions.fuels || []);
      populateSelect('transmission', searchOptions.transmissions || []);
    } catch (error) {
      console.error('Error loading search options:', error);
    }
  }
  
  // Populate select options
  function populateSelect(elementId: string, options: string[]) {
    const select = document.getElementById(elementId) as HTMLSelectElement;
    if (!select) return;
    
    options.forEach(option => {
      const optionElement = document.createElement('option');
      optionElement.value = option;
      optionElement.textContent = option;
      select.appendChild(optionElement);
    });
  }
  
  // Perform search
  async function performSearch(page: number = 1) {
    showLoading();
    
    try {
      if (!searchForm) return;
      
      const formData = new FormData(searchForm);
      const searchParams: Record<string, any> = Object.fromEntries(formData.entries());
      
      // Remove empty values
      Object.keys(searchParams).forEach(key => {
        if (!searchParams[key]) {
          delete searchParams[key];
        }
      });
      
      searchParams.limit = 9; // 3x3 grid
      searchParams.offset = (page - 1) * 9;
      
      const response = await fetch(`${API_BASE_URL}/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(searchParams),
      });
      
      searchData = await response.json();
      currentPage = page;
      totalPages = Math.ceil((searchData.total || 0) / 9);
      
      renderResults();
      renderPagination();
      
    } catch (error) {
      console.error('Error performing search:', error);
      showError();
    } finally {
      hideLoading();
    }
  }
  
  // Render search results
  function renderResults() {
    if (!carsGrid || !resultsInfo || !resultsCount) return;
    
    if (!searchData.cars || searchData.cars.length === 0) {
      carsGrid.innerHTML = `
        <div class="no-results">
          <h3>Keine Fahrzeuge gefunden</h3>
          <p>Versuchen Sie es mit anderen Suchkriterien.</p>
        </div>
      `;
      resultsInfo.style.display = 'none';
      return;
    }
    
    const carsHTML = searchData.cars.map((car: any, index: number) => `
      <div class="car-card" style="animation-delay: ${index * 0.1}s">
        <div class="car-image">
          <img 
            src="${car.image_urls?.[0] || '/placeholder-car.svg'}" 
            alt="${car.title}"
            loading="lazy"
          />
        </div>
        <div class="car-info">
          <h3 class="car-title">${car.title}</h3>
          <div class="car-brand">${car.brand}</div>
          <div class="car-pricing">
            <div class="car-price">CHF ${car.price_chf.toLocaleString()}</div>
            <div class="car-leasing">${car.leasing_text}</div>
          </div>
        </div>
      </div>
    `).join('');
    
    carsGrid.innerHTML = carsHTML;
    
    resultsCount.textContent = `${searchData.total || 0} Fahrzeuge gefunden`;
    resultsInfo.style.display = 'block';
  }
  
  // Render pagination
  function renderPagination() {
    if (!paginationContainer) return;
    
    if (totalPages <= 1) {
      paginationContainer.innerHTML = '';
      return;
    }
    
    const visiblePages = getVisiblePages(currentPage, totalPages);
    const pagesHTML = visiblePages.map(page => {
      if (page === '...') {
        return '<span class="pagination-dots">...</span>';
      }
      return `
        <button 
          class="pagination-number ${page === currentPage ? 'active' : ''}"
          onclick="goToPage(${page})"
        >
          ${page}
        </button>
      `;
    }).join('');
    
    paginationContainer.innerHTML = `
      <div class="pagination">
        <button 
          class="pagination-btn pagination-prev"
          ${currentPage <= 1 ? 'disabled' : ''}
          onclick="goToPage(${currentPage - 1})"
        >
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
          Zur√ºck
        </button>
        <div class="pagination-numbers">
          ${pagesHTML}
        </div>
        <button 
          class="pagination-btn pagination-next"
          ${currentPage >= totalPages ? 'disabled' : ''}
          onclick="goToPage(${currentPage + 1})"
        >
          Weiter
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    `;
  }
  
  // Get visible pages for pagination
  function getVisiblePages(current: number, total: number) {
    const delta = 2;
    const range = [];
    const rangeWithDots = [];
    
    for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
      range.push(i);
    }
    
    if (current - delta > 2) {
      rangeWithDots.push(1, '...');
    } else {
      rangeWithDots.push(1);
    }
    
    rangeWithDots.push(...range);
    
    if (current + delta < total - 1) {
      rangeWithDots.push('...', total);
    } else if (total > 1) {
      rangeWithDots.push(total);
    }
    
    return rangeWithDots;
  }
  
  // Go to specific page
  (window as any).goToPage = function(page: number) {
    if (page >= 1 && page <= totalPages) {
      performSearch(page);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };
  
  // Show loading state
  function showLoading() {
    if (!loading || !carsGrid || !resultsInfo || !paginationContainer) return;
    
    loading.style.display = 'flex';
    carsGrid.style.display = 'none';
    resultsInfo.style.display = 'none';
    paginationContainer.innerHTML = '';
  }
  
  // Hide loading state
  function hideLoading() {
    if (!loading || !carsGrid) return;
    
    loading.style.display = 'none';
    carsGrid.style.display = 'grid';
  }
  
  // Show error state
  function showError() {
    if (!carsGrid) return;
    
    carsGrid.innerHTML = `
      <div class="no-results">
        <h3>Fehler beim Laden</h3>
        <p>Bitte versuchen Sie es sp√§ter erneut.</p>
      </div>
    `;
  }
  
  // Event listeners
  if (searchForm) {
    searchForm.addEventListener('submit', (e) => {
      e.preventDefault();
      currentPage = 1;
      performSearch(1);
    });
  }
  
  // Initialize when DOM is loaded
  init();
</script> 