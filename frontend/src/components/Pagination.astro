---
interface Props {
  currentPage: number;
  totalPages: number;
  onPageChange: string; // JavaScript function name
}

const { currentPage, totalPages, onPageChange } = Astro.props;

// Calculate visible page numbers
const getVisiblePages = (current: number, total: number) => {
  const delta = 2;
  const range = [];
  const rangeWithDots = [];

  for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
    range.push(i);
  }

  if (current - delta > 2) {
    rangeWithDots.push(1, '...');
  } else {
    rangeWithDots.push(1);
  }

  rangeWithDots.push(...range);

  if (current + delta < total - 1) {
    rangeWithDots.push('...', total);
  } else if (total > 1) {
    rangeWithDots.push(total);
  }

  return rangeWithDots;
};

const visiblePages = totalPages > 1 ? getVisiblePages(currentPage, totalPages) : [];
---

{totalPages > 1 && (
  <div class="pagination">
    <button 
      class="pagination-btn pagination-prev"
      disabled={currentPage <= 1}
      onclick={`${onPageChange}(${currentPage - 1})`}
    >
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="15,18 9,12 15,6"></polyline>
      </svg>
      Zur√ºck
    </button>

    <div class="pagination-numbers">
      {visiblePages.map((page) => (
        page === '...' ? (
          <span class="pagination-dots">...</span>
        ) : (
          <button 
            class={`pagination-number ${page === currentPage ? 'active' : ''}`}
            onclick={`${onPageChange}(${page})`}
          >
            {page}
          </button>
        )
      ))}
    </div>

    <button 
      class="pagination-btn pagination-next"
      disabled={currentPage >= totalPages}
      onclick={`${onPageChange}(${currentPage + 1})`}
    >
      Weiter
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="9,18 15,12 9,6"></polyline>
      </svg>
    </button>
  </div>
)}

<style>
  .pagination {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin: 2rem 0;
    flex-wrap: wrap;
  }

  .pagination-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .pagination-btn:hover:not(:disabled) {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .pagination-numbers {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .pagination-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .pagination-number:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .pagination-number.active {
    background: #3b82f6;
    border-color: #3b82f6;
    color: white;
  }

  .pagination-dots {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    color: #9ca3af;
    font-weight: 600;
  }

  /* Mobile adjustments */
  @media (max-width: 640px) {
    .pagination {
      gap: 0.25rem;
    }
    
    .pagination-btn {
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
    }
    
    .pagination-number,
    .pagination-dots {
      width: 2rem;
      height: 2rem;
      font-size: 0.75rem;
    }
  }
</style> 