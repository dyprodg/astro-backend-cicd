name: Deploy Search API

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/functions/search-api/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/functions/search-api/**'

env:
  GO_VERSION: '1.21'
  AWS_REGION: 'eu-central-1'
  FUNCTION_NAME: 'search-api'

jobs:
  # Test the Go code
  test:
    name: Test Go Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/functions/search-api/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: backend/functions/search-api
      run: make deps

    - name: Run tests
      working-directory: backend/functions/search-api
      run: make test

    - name: Run linter
      working-directory: backend/functions/search-api
      run: make lint

    - name: Format check
      working-directory: backend/functions/search-api
      run: make fmt

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/functions/search-api/coverage.out
        flags: search-api
        name: search-api-coverage

  # Build and deploy (only on main branch)
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/functions/search-api/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and Deploy Lambda
      working-directory: backend/functions/search-api
      run: make update-lambda

    - name: Test deployed API
      run: |
        echo "Testing deployed API endpoints..."
        
        echo "1. Testing search options..."
        curl -f "https://brlsb82kdc.execute-api.eu-central-1.amazonaws.com/prod/search/options" | jq .
        
        echo "2. Testing search..."
        curl -f -X POST "https://brlsb82kdc.execute-api.eu-central-1.amazonaws.com/prod/search" \
          -H "Content-Type: application/json" \
          -d '{"query": "BMW", "limit": 1}' | jq .

    - name: Post deployment summary
      run: |
        echo "## ðŸš€ Lambda Function Updated!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### API Endpoints:" >> $GITHUB_STEP_SUMMARY
        echo "- **Search Options:** https://brlsb82kdc.execute-api.eu-central-1.amazonaws.com/prod/search/options" >> $GITHUB_STEP_SUMMARY
        echo "- **Search:** https://brlsb82kdc.execute-api.eu-central-1.amazonaws.com/prod/search" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment:" >> $GITHUB_STEP_SUMMARY
        echo "- **Function:** ${{ env.FUNCTION_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runtime:** provided.al2023 (ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 